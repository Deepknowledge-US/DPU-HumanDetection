# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: test_bluefield_4.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16test_bluefield_4.proto\x12\x0etest_bluefield\";\n\tRectangle\x12\n\n\x02r1\x18\x01 \x01(\x05\x12\n\n\x02r2\x18\x02 \x01(\x05\x12\n\n\x02r3\x18\x03 \x01(\x05\x12\n\n\x02r4\x18\x04 \x01(\x05\"\x82\x01\n\nRectangles\x12$\n\x05\x66rame\x18\x01 \x01(\x0b\x32\x15.test_bluefield.Frame\x12\x11\n\tnum_frame\x18\x02 \x01(\x05\x12\x0c\n\x04time\x18\x03 \x01(\t\x12-\n\ndetections\x18\x04 \x03(\x0b\x32\x19.test_bluefield.Rectangle\",\n\x05\x46rame\x12#\n\x05lines\x18\x01 \x03(\x0b\x32\x14.test_bluefield.Line\"-\n\x04Line\x12%\n\x06pixels\x18\x01 \x03(\x0b\x32\x15.test_bluefield.Pixel\"(\n\x05Pixel\x12\t\n\x01r\x18\x01 \x01(\x05\x12\t\n\x01g\x18\x02 \x01(\x05\x12\t\n\x01\x62\x18\x03 \x01(\x05\"\x19\n\x05\x45mpty\x12\x10\n\x08response\x18\x01 \x01(\x05\x32M\n\tDetection\x12@\n\tSendFrame\x12\x1a.test_bluefield.Rectangles\x1a\x15.test_bluefield.Empty\"\x00\x42<\n\x1fio.grpc.examples.test_bluefieldB\x12TestBluefieldProtoP\x01\xa2\x02\x02TBb\x06proto3')



_RECTANGLE = DESCRIPTOR.message_types_by_name['Rectangle']
_RECTANGLES = DESCRIPTOR.message_types_by_name['Rectangles']
_FRAME = DESCRIPTOR.message_types_by_name['Frame']
_LINE = DESCRIPTOR.message_types_by_name['Line']
_PIXEL = DESCRIPTOR.message_types_by_name['Pixel']
_EMPTY = DESCRIPTOR.message_types_by_name['Empty']
Rectangle = _reflection.GeneratedProtocolMessageType('Rectangle', (_message.Message,), {
  'DESCRIPTOR' : _RECTANGLE,
  '__module__' : 'test_bluefield_4_pb2'
  # @@protoc_insertion_point(class_scope:test_bluefield.Rectangle)
  })
_sym_db.RegisterMessage(Rectangle)

Rectangles = _reflection.GeneratedProtocolMessageType('Rectangles', (_message.Message,), {
  'DESCRIPTOR' : _RECTANGLES,
  '__module__' : 'test_bluefield_4_pb2'
  # @@protoc_insertion_point(class_scope:test_bluefield.Rectangles)
  })
_sym_db.RegisterMessage(Rectangles)

Frame = _reflection.GeneratedProtocolMessageType('Frame', (_message.Message,), {
  'DESCRIPTOR' : _FRAME,
  '__module__' : 'test_bluefield_4_pb2'
  # @@protoc_insertion_point(class_scope:test_bluefield.Frame)
  })
_sym_db.RegisterMessage(Frame)

Line = _reflection.GeneratedProtocolMessageType('Line', (_message.Message,), {
  'DESCRIPTOR' : _LINE,
  '__module__' : 'test_bluefield_4_pb2'
  # @@protoc_insertion_point(class_scope:test_bluefield.Line)
  })
_sym_db.RegisterMessage(Line)

Pixel = _reflection.GeneratedProtocolMessageType('Pixel', (_message.Message,), {
  'DESCRIPTOR' : _PIXEL,
  '__module__' : 'test_bluefield_4_pb2'
  # @@protoc_insertion_point(class_scope:test_bluefield.Pixel)
  })
_sym_db.RegisterMessage(Pixel)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), {
  'DESCRIPTOR' : _EMPTY,
  '__module__' : 'test_bluefield_4_pb2'
  # @@protoc_insertion_point(class_scope:test_bluefield.Empty)
  })
_sym_db.RegisterMessage(Empty)

_DETECTION = DESCRIPTOR.services_by_name['Detection']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\037io.grpc.examples.test_bluefieldB\022TestBluefieldProtoP\001\242\002\002TB'
  _RECTANGLE._serialized_start=42
  _RECTANGLE._serialized_end=101
  _RECTANGLES._serialized_start=104
  _RECTANGLES._serialized_end=234
  _FRAME._serialized_start=236
  _FRAME._serialized_end=280
  _LINE._serialized_start=282
  _LINE._serialized_end=327
  _PIXEL._serialized_start=329
  _PIXEL._serialized_end=369
  _EMPTY._serialized_start=371
  _EMPTY._serialized_end=396
  _DETECTION._serialized_start=398
  _DETECTION._serialized_end=475
# @@protoc_insertion_point(module_scope)